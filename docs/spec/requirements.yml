- id: REQ-FRONTMATTER-001
  area: frontmatter
  statement: "Convert leading page properties `key:: value` into YAML front matter."
  status: active

- id: REQ-FRONTMATTER-002
  area: frontmatter
  statement: "Map `alias::` or `aliases::` to YAML `aliases: [..]`."
  status: active

- id: REQ-FRONTMATTER-003
  area: frontmatter
  statement: "Map `tags::` to YAML `tags: [..]` with normalized names (no #) and stable order."
  status: active

- id: REQ-FRONTMATTER-004
  area: frontmatter
  statement: "Preserve unknown page properties as scalar YAML fields."
  status: active

- id: REQ-FRONTMATTER-005
  area: frontmatter
  statement: "Only top-of-file, non-indented `key:: value` lines become YAML front matter; later or indented properties remain in the body."
  status: active

- id: REQ-TITLE-001
  area: frontmatter
  statement: "Always drop `title::` from YAML; if it mismatches the vault-relative output path (without extension), emit a warning so the user can tidy up."
  status: active

- id: REQ-SPACING-001
  area: formatting
  statement: "Ensure exactly one blank line after YAML front matter; no extra leading blank lines before body."
  status: active

- id: REQ-TASKS-001
  area: tasks
  statement: "Convert `- TODO Text` to `- [ ] Text`."
  status: active

- id: REQ-TASKS-002
  area: tasks
  statement: "Convert `- DONE Text` to `- [x] Text`."
  status: active

- id: REQ-TASKS-003
  area: tasks
  statement: "(Deprecated) Annotating non-TODO/DONE states with `--annotate-status`."
  status: deprecated

- id: REQ-TASKS-004
  area: tasks
  statement: "Treat `- CANCELED ...` and `- CANCELLED ...` as completed tasks mapped to `- [x] ...`."
  status: active

- id: REQ-TASKS-005
  area: tasks
  statement: "Treat `- DOING ...`, `- LATER ...`, `- NOW ...`, `- IN-PROGRESS ...`, `- WAIT ...`, and `- WAITING ...` as unchecked tasks mapped to `- [ ] ...`."
  status: active

- id: REQ-TASKS-006
  area: tasks
  statement: "Recognize tasks only when the line begins with a hyphen list marker followed by an uppercase state token (no `*`/`+`; states must be uppercase)."
  status: active

- id: REQ-BLOCKID-001
  area: blocks
  statement: "Attach `id:: VALUE` to the previous content line as a trailing block anchor `^VALUE`."
  status: active

- id: REQ-BLOCKID-002
  area: blocks
  statement: "Do not attach `id::` if a property line appears after the content and before the id."
  status: active

- id: REQ-BLOCKID-003
  area: blocks
  statement: "When `id::` appears on the bullet head, attach its anchor to the first content line of that block; if no content exists, keep the id property line."
  status: active

- id: REQ-BLOCKREF-001
  area: links
  statement: "Replace `((id))` with a wiki link to the target note and anchor `[[path#^id]]`."
  status: active

- id: REQ-BLOCKREF-002
  area: links
  statement: "Leave unresolved block references unchanged when the id is unknown."
  status: active

- id: REQ-LINKPATH-001
  area: links
  statement: "Use vault-relative link targets without file extension, with forward slashes."
  status: active

# Wikilink ‚Üí Dataview field conversion (configurable)
- id: REQ-LINKNS-001
  area: links
  statement: "When a field key is configured, convert wikilinks of the form `[[key/value]]` to Dataview inline fields `[key::value]` for that key."
  status: active

- id: REQ-LINKNS-002
  area: links
  statement: "Do not convert embedded links (`![[...]]`), aliased links (`[[key/value|Alias]]`), or links without a slash."
  status: active

- id: REQ-LINKNS-003
  area: links
  statement: "Skip conversion inside fenced code blocks."
  status: active

- id: REQ-EMBED-001
  area: embeds
  statement: "Convert `{{embed ((id))}}` to `![[path#^id]]` after resolving the block ref."
  status: active

- id: REQ-EMBED-002
  area: embeds
  statement: "Convert `{{embed [[Page]]}}` to `![[Page]]`."
  status: active

- id: REQ-IMAGE-001
  area: images
  statement: "Convert Logseq markdown image links to assets (e.g., `![alt](../assets/img.png)`) into Obsidian embeds `![[img.png]]`; alt text is dropped."
  status: active

- id: REQ-PROPS-001
  area: properties
  statement: "Filter out block-level `collapsed::` properties; Obsidian stores collapse state outside Markdown."
  status: active

- id: REQ-PROPS-002
  area: properties
  statement: "Filter `collapsed::` even when present on the bullet head (e.g., '- collapsed:: true')."
  status: active

- id: REQ-JOURNALS-001
  area: journals
  statement: "Always rename journal filenames from `YYYY_MM_DD.md` to `YYYY-MM-DD.md`."
  status: active

- id: REQ-JOURNALS-002
  area: journals
  statement: "With `--daily-folder NAME`, place journals under that folder in output."
  status: active

- id: REQ-STRUCTURE-001
  area: structure
  statement: "Place all files from `pages/` at the vault root, and expand `___` in filenames to subfolders (e.g., `a___b.md` ‚Üí `a/b.md`)."
  status: active

- id: REQ-STRUCTURE-002
  area: structure
  statement: "Copy non-Markdown files as-is."
  status: active

- id: REQ-STRUCTURE-003
  area: structure
  statement: "Do not process or copy the top-level `logseq/` metadata directory from the source vault."
  status: active

- id: REQ-STRUCTURE-004
  area: structure
  statement: "Do not process or copy the top-level `whiteboards/` directory; emit a warning if present."
  status: active

- id: REQ-HEADCHILD-001
  area: formatting
  statement: "When a heading is immediately followed by an indented list (‚â•4 spaces or tabs equivalent), prefix the heading with '- ' so it becomes a list item containing the heading."
  status: active

- id: REQ-HEADCHILD-002
  area: formatting
  statement: "Do not modify headings already inside a list item (e.g., lines starting with '- #')."
  status: active

- id: REQ-HEADCHILD-003
  area: formatting
  statement: "Do not alter fenced code blocks when normalizing heading + child lists."
  status: active

# Priority mapping to Obsidian Tasks
- id: REQ-TASKS-PRIO-001
  area: tasks
  statement: "Map Logseq priorities placed right after the state token (`[#A]`, `[#B]`, `[#C]`) to High/Medium/Low and remove the bracket token."
  status: active

- id: REQ-TASKS-PRIO-002
  area: tasks
  statement: "When `--tasks-format emoji`, append the corresponding emoji at end of the task: A‚Üí‚è´, B‚Üíüîº, C‚ÜíüîΩ."
  status: active

- id: REQ-TASKS-PRIO-003
  area: tasks
  statement: "When `--tasks-format dataview`, append `[priority::high|medium|low]` inline field; omit any field when no priority is present."
  status: active

- id: REQ-TASKS-PRIO-004
  area: tasks
  statement: "Recognize priority only when immediately following the state token; priorities elsewhere are ignored."
  status: active

# Dates and recurrence mapping
- id: REQ-TASKS-DATE-001
  area: tasks
  statement: "Detect `SCHEDULED: <YYYY-MM-DD [Dow] [HH:MM] [repeater]>` anywhere in the task text and emit a Tasks 'scheduled' field (emoji/dataview)."
  status: active

- id: REQ-TASKS-DATE-002
  area: tasks
  statement: "Detect `DEADLINE: <YYYY-MM-DD [Dow] [HH:MM] [repeater]>` anywhere in the task text and emit a Tasks 'due' field (emoji/dataview)."
  status: active

- id: REQ-TASKS-DATE-003
  area: tasks
  statement: "Map repeaters `.+N<u>` and `++N<u>` to 'every N <unit> when done', and `+N<u>` to 'every N <unit>' (units: y/m/w/d/h; pluralize when N‚â†1)."
  status: active

- id: REQ-TASKS-DATE-004
  area: tasks
  statement: "Strip the original SCHEDULED/DEADLINE tokens from the text and append the formatted fields at the end of the task line."
  status: active

- id: REQ-TASKS-DATE-005
  area: tasks
  statement: "Place appended fields before any trailing block anchor (e.g., '^id')."
  status: active

- id: REQ-TASKS-DATE-006
  area: tasks
  statement: "Support both SCHEDULED and DEADLINE on the same task line; emit both (scheduled first, then due)."
  status: active

- id: REQ-TASKS-DATE-007
  area: tasks
  statement: "Recognize SCHEDULED/DEADLINE tokens appearing on subsequent physical lines that continue the same task (same indentation, no leading '-')."
  status: active
